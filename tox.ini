[tox]
env_list =
    check-{style,dependencies,build}
    test{,-alldeps,-devdeps}{,-pyargs,-warnings,-regtests,-cov}
    test-numpy{120,121,122}-xdist
    build-{docs,dist}

# tox environments are constructed with so-called 'factors' (or terms)
# separated by hyphens, e.g. test-devdeps-cov. Lines below starting with factor:
# will only take effect if that factor is included in the environment name. To
# see a list of example environments that can be run, along with a description,
# run:
#
#     tox -l -v
#

[testenv:check-style]
skip_install = true
description = Run all style and file checks with pre-commit
deps =
    pre-commit
commands =
    pre-commit install-hooks
    pre-commit run {posargs:--color always --all-files --show-diff-on-failure}

[testenv:check-dependencies]
description = verify that modules can be imported
# `extras` needs to be empty to check modules without additional dependencies
extras =
deps =
    pytest
commands =
    verify_install_requires

[testenv]
description =
    run tests
    alldeps: with all optional dependencies
    devdeps: with the latest developer version of key dependencies
    oldestdeps: with the oldest supported version of key dependencies
    pyargs: with --pyargs on installed package
    warnings: treating warnings as errors
    regtests: with --bigdata and --slow flags
    cov: with coverage
    xdist: using parallel processing
    ddtrace: passing test traces to DataDog agent
pass_env =
    HOME
    CI
    TOXENV
    CRDS_*
    TEST_BIGDATA
    CODECOV_*
    DD_*
extras =
    test
    alldeps: all
deps =
    xdist: pytest-xdist
    ddtrace: ddtrace
    oldestdeps: minimum_dependencies
commands_pre =
    oldestdeps: minimum_dependencies romancal --filename requirements-min.txt
    oldestdeps: pip install -r requirements-min.txt
    devdeps: pip install -r requirements-dev.txt
    pip freeze
commands =
    pytest \
    cov: --cov --cov-config pyproject.toml --cov-report term-missing --cov-report xml \
    warnings: -W error \
    regtests: --bigdata --slow --basetemp={homedir}/test_outputs \
    xdist: -n auto \
    pyargs: {toxinidir}/docs --pyargs {posargs:romancal} \
    ddtrace: --ddtrace \
    {posargs}

[testenv:build-docs]
description = invoke sphinx-build to build the HTML docs
extras = docs
commands =
    sphinx-build -W docs docs/_build

[testenv:build-dist]
description = build wheel and sdist
skip_install = true
deps =
    build
commands =
    python -m build .

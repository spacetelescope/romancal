name: CI

on:
  push:
    branches:
      - main
      - '*.x'
    tags:
      - '*'
  pull_request:
    branches:
      - main
  schedule:
    # Weekly Monday 9AM build
    # * is a special character in YAML so you have to quote this string
    - cron: '0 9 * * 1'

env:
  CRDS_SERVER_URL: "https://roman-crds-test.stsci.edu"
  CRDS_PATH: "/tmp/crds_cache"
  CRDS_CLIENT_RETRY_COUNT: 3
  CRDS_CLIENT_RETRY_DELAY_SECONDS: 20

jobs:
  style:
    name: Code style checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.0.2
      - uses: actions/setup-python@v4.1.0
        id: python
        with:
          python-version: 3.9
      - uses: actions/cache@v3.0.5
        with:
          path: ${{ env.pythonLocation }}
          key: style-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('**/pyproject.toml', '**/setup.*') }}
      - run: pip install pyproject-flake8
      - run: pip freeze
      - run: pflake8
  audit:
    name: Bandit security audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.0.2
      - uses: actions/setup-python@v4.1.0
        id: python
        with:
          python-version: 3.9
      - uses: actions/cache@v3.0.5
        with:
          path: ${{ env.pythonLocation }}
          key: audit-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('**/pyproject.toml', '**/setup.*') }}
      - run: pip install bandit
      - run: pip freeze
      - run: bandit romancal -r -x tests,regtest
  dependencies:
    name: verify dependencies are correct
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.0.2
      - uses: actions/setup-python@v4.1.0
        id: python
        with:
          python-version: 3.9
      - uses: actions/cache@v3.0.5
        with:
          path: ${{ env.pythonLocation }}
          key: dependencies-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('**/pyproject.toml', '**/setup.*') }}
      - run: pip install .
      - run: pip freeze
      - run: verify_install_requires
  test:
    name: test
    needs: [ style, audit, dependencies ]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-latest', 'macos-latest' ]
        python: [ '3.8', '3.9', '3.10', '3.11' ]
    steps:
      - uses: actions/checkout@v3.0.2
      - uses: actions/setup-python@v4.1.0
        id: python
        with:
          python-version: ${{ matrix.python }}
      - uses: actions/cache@v3.0.5
        with:
          path: ${{ env.pythonLocation }}
          key: test-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('**/pyproject.toml', '**/setup.*') }}
      - run: pip install ".[test]" pytest-xdist
      - run: pip freeze
      - run: pytest -n auto
  test_alldeps:
    name: test optional dependencies
    needs: [ test ]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-latest', 'macos-latest' ]
        python: [ '3.8', '3.9', '3.10', '3.11' ]
    steps:
      - uses: actions/checkout@v3.0.2
      - uses: actions/setup-python@v4.1.0
        id: python
        with:
          python-version: ${{ matrix.python }}
      - uses: actions/cache@v3.0.5
        with:
          path: ${{ env.pythonLocation }}
          key: test-alldeps-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('**/pyproject.toml', '**/setup.*') }}
      - run: pip install ".[test,all]" pytest-xdist
      - run: pip freeze
      - run: pytest -n auto
  test_devdeps:
    name: test developer versions
    needs: [ test ]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-latest', 'macos-latest' ]
        python: [ '3.8', '3.9', '3.10', '3.11' ]
    steps:
      - uses: actions/checkout@v3.0.2
      - uses: actions/setup-python@v4.1.0
        id: python
        with:
          python-version: ${{ matrix.python }}
      - uses: actions/cache@v3.0.5
        with:
          path: ${{ env.pythonLocation }}
          key: test-devdeps-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('**/pyproject.toml', '**/setup.*') }}
      - run: pip install git+https://github.com/asdf-format/asdf git+https://github.com/spacetelescope/stpipe git+https://github.com/spacetelescope/stdatamodels --pre astropy numpy
      - run: pip install ".[test]" pytest-xdist
      - run: pip freeze
      - run: pytest -n auto
  test_pyargs:
    name: test --pyargs
    needs: [ test ]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-latest', 'macos-latest' ]
        python: [ '3.8', '3.9', '3.10', '3.11' ]
        exclude:
          - os: macos-latest
            python: '3.11'
    steps:
      - uses: actions/checkout@v3.0.2
      - uses: actions/setup-python@v4.1.0
        id: python
        with:
          python-version: ${{ matrix.python }}
      - uses: actions/cache@v3.0.5
        with:
          path: ${{ env.pythonLocation }}
          key: test-pyargs-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('**/pyproject.toml', '**/setup.*') }}
      - run: pip install ".[test]" pytest-xdist
      - run: pip freeze
      - run: pytest -n auto ./docs --pyargs romancal
  test_older_numpy:
    name: test Numpy ${{ matrix.numpy }} (Python ${{ matrix.python }})
    needs: [ test ]
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python: [ '3.8', '3.9', '3.10', '3.11' ]
        numpy: [ '1.20.*', '1.21.*', '1.22.*' ]
        exclude:
          - python: '3.10'
            numpy: '1.20.*'
          - python: '3.11'
            numpy: '1.20.*'
          - python: '3.11'
            numpy: '1.21.*'
          - python: '3.11'
            numpy: '1.22.*'
    steps:
      - uses: actions/checkout@v3.0.2
      - uses: actions/setup-python@v4.1.0
        id: python
        with:
          python-version: ${{ matrix.python }}
      - uses: actions/cache@v3.0.5
        with:
          path: ${{ env.pythonLocation }}
          key: test-numpy${{ matrix.numpy }}-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('**/pyproject.toml', '**/setup.*') }}
      - run: pip install -e ".[test]" pytest-xdist
      - run: pip install numpy==${{ matrix.numpy }}
      - run: pip freeze
      - run: pytest -n auto
  test_with_coverage:
    name: test with coverage
    needs: [ test, test_alldeps, test_devdeps, test_pyargs, test_older_numpy ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.0.2
      - uses: actions/setup-python@v4.1.0
        id: python
        with:
          python-version: 3.9
      - uses: actions/cache@v3.0.5
        with:
          path: ${{ env.pythonLocation }}
          key: test-coverage-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('**/pyproject.toml', '**/setup.*') }}
      - run: pip install ".[test]" pytest-xdist pytest-cov
      - run: pip freeze
      - run: pytest -n auto --cov --cov-report xml --cov-report term-missing
      - uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unit
          fail_ci_if_error: true
  build_docs:
    name: build HTML docs
    needs: [ test, test_alldeps, test_devdeps, test_pyargs, test_older_numpy ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.0.2
      - uses: actions/setup-python@v4.1.0
        id: python
        with:
          python-version: 3.9
      - uses: actions/cache@v3.0.5
        with:
          path: ${{ env.pythonLocation }}
          key: build-docs-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('**/pyproject.toml', '**/setup.*') }}
      - run: sudo apt-get install graphviz texlive-latex-extra dvipng
      - run: pip install ".[docs]"
      - run: pip freeze
      - run: sphinx-build -W docs docs/_build
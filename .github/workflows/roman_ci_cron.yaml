name: test on schedule

on:
  schedule:
    # Weekly Monday 6AM build
    - cron: "0 0 * * 1"
  pull_request:
    # We also want this workflow triggered if the `Weekly CI` label is
    # added or present when PR is updated
    types:
      - opened
      - reopened
      - labeled
      - unlabeled
      - synchronize
  push:
    tags:
      - "*"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  data:
    if: (github.repository == 'spacetelescope/romancal' && (github.event_name == 'schedule' || github.event_name == 'push' || github.event_name == 'workflow_dispatch' || contains(github.event.pull_request.labels.*.name, 'run scheduled tests')))
    name: retrieve current CRDS context, and WebbPSF data
    runs-on: ubuntu-latest
    env:
      OBSERVATORY: roman
      CRDS_SERVER_URL: https://roman-crds.stsci.edu
      CRDS_PATH: /tmp/data
    outputs:
      data_path: ${{ steps.data.outputs.path }}
      webbpsf_path: ${{ steps.webbpsf_path.outputs.path }}
      data_hash: ${{ steps.data_hash.outputs.hash }}
      crds_path: ${{ steps.crds_path.outputs.path }}
      crds_context: ${{ steps.crds_context.outputs.pmap }}
      crds_server: ${{ steps.crds_server.outputs.url }}
    steps:
      # crds:
      - id: crds_context
        run: >
          echo "pmap=$(
          curl -s -X POST -d '{"jsonrpc": "1.0", "method": "get_default_context", "params": ["${{ env.OBSERVATORY }}"], "id": 1}' ${{ env.CRDS_SERVER_URL }}/json/ |
          python -c "import sys, json; print(json.load(sys.stdin)['result'])"
          )" >> $GITHUB_OUTPUT
        # Get default CRDS_CONTEXT without installing crds client
        # See https://hst-crds.stsci.edu/static/users_guide/web_services.html#generic-request
      - id: crds_path
        run: echo "path=${{ env.CRDS_PATH }}" >> $GITHUB_OUTPUT
      - id: crds_server
        run: echo "url=${{ env.CRDS_SERVER_URL }}" >> $GITHUB_OUTPUT
      # webbpsf:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - id: data
        run: |
          echo "path=/tmp/data" >> $GITHUB_OUTPUT
          echo "webbpsf_url=https://stsci.box.com/shared/static/n1fealx9q0m6sdnass6wnyfikvxtc0zz.gz" >> $GITHUB_OUTPUT
      - run: |
          mkdir -p tmp/data/
          mkdir -p ${{ steps.data.outputs.path }}
      - run: wget ${{ steps.data.outputs.webbpsf_url }} -O tmp/minimal-webbpsf-data.tar.gz
      - run: tar -xzvf tmp/minimal-webbpsf-data.tar.gz -C tmp/data/
      - id: data_hash
        run: echo "hash=${{ hashFiles( 'tmp/data' ) }}" >> $GITHUB_OUTPUT
      - run: mv tmp/data/* ${{ steps.data.outputs.path }}
      - uses: actions/cache@v3
        with:
          path: ${{ steps.data.outputs.path }}
          key: data-${{ steps.data_hash.outputs.hash }}-${{ steps.crds_context.outputs.pmap }}
      - id: webbpsf_path
        run: echo "path=${{ steps.data.outputs.path }}/webbpsf-data" >> $GITHUB_OUTPUT
  test:
    uses: OpenAstronomy/github-actions-workflows/.github/workflows/tox.yml@main
    needs: [ data ]
    with:
      setenv: |
        WEBBPSF_PATH: ${{ needs.data.outputs.webbpsf_path }}
        CRDS_PATH: ${{ needs.data.outputs.crds_path }}
        CRDS_SERVER_URL: ${{ needs.data.outputs.crds_server }}
        CRDS_CLIENT_RETRY_COUNT: 3
        CRDS_CLIENT_RETRY_DELAY_SECONDS: 20
      cache-path: ${{ needs.data.outputs.crds_path }}
      cache-key: data-${{ needs.data.outputs.data_hash }}-${{ needs.data.outputs.crds_context }}
      envs: |
        - macos: py39
          pytest-results-summary: true
        - macos: py310
          pytest-results-summary: true
        - macos: py311-sdpdeps
          pytest-results-summary: true
        - linux: py3-pyargs
          pytest-results-summary: true
